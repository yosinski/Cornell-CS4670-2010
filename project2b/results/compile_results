#!/bin/bash

# This script make the results webpage.  Run from project2 directory


#make || exit 1


#cp data/bird.jpg  results/
#cp data/lenna.jpg results/

#./cs4670 -f gaussian    -i data/bird.jpg  -o results/gaussian.jpg
#./cs4670 -f sharpen     -i data/lenna.jpg -o results/sharpen.jpg
#./cs4670 -f sobel_x     -i data/lenna.jpg -o results/sobel_x.jpg
#./cs4670 -f sobel_y     -i data/lenna.jpg -o results/sobel_y.jpg
#./cs4670 -f median -p 1 -i data/lenna.jpg -o results/median_1.jpg
#./cs4670 -f median -p 3 -i data/lenna.jpg -o results/median_3.jpg

(cat <<EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta http-equiv="Content-Language" content="en-us" />
        <link rel="stylesheet" type="text/css" media="all" href="all.css" />
        <title>CS4670 &ndash; Project 2b</title>
    </head>
    <body>

    <div class="bigpage">
    <div class="notespage">
    <h1>CS4670 &ndash; Project 2b</h1>

    <p>Cooper Bills (csb88) and Jason Yosinski (jy495)<br />2 November 2010</p>


    <h2>Design Choices</h2>
    <p><ul>
        <li>Our ratio feature matching uses a threshold (currently set to 0.65)</li>
        <li>Our total score for our feature matching is the negative of number of features matched (to account for thresholding)</li>
    </ul></p>

    <h2>Panoramas</h2>

    <p>Our program was able to generate beautiful looking panoramas given two overlapping images, Using Homographies, RANSAC, and Feathering/Alpha Blending</p>
    <p>Here are some example panoramas generated on the N900:</p>

    <div class="image">
    <img src="sage.png" />
    <p>Sage Hall</p>
    </div>

    <div class="image">
    <img src="duff1.png" />
    <p>Windows of Phillips from Duffied</p>
    </div>

    <div class="image">
    <img src="duff2.png" />
    <p>Duffield Atrium 1</p>
    </div>

    <div class="image">
    <img src="duff3.png" />
    <p>Duffield Atrium 2</p>
    </div>

    <div class="image">
    <img src="water.png" />
    <p>Water Bottle</p>
    </div>

    <div class="image">
    <img src="pan_yosemite.jpg" />
    <p>Yosemite</p>
    </div>


    <h2>Object Matching</h2>

    <p>Our program succussfuly idetifies what object is present (from a database) and computes the Homography for it's location and orentation using RANSAC.  Note that because we used such a strong threshold for feature matching, many of the features on the books/dvd covers were not chosen.  This improves performance by ignoring more extraneous features.</p> 

    <div class="image">
    <img style="max-width:47.5%" src="c1.png" />
    <img style="max-width:47.5%" src="c2.png" />
    <p>C Programming Book</p>
    </div>

    <div class="image">
    <img style="max-width:47.5%" src="ai1.png" />
    <img style="max-width:47.5%" src="ai2.png" />
    <p>Artificial Intelligence Book</p>
    </div>

    <div class="image">
    <img style="max-width:47.5%" src="mb1.png" />
    <img style="max-width:47.5%" src="mb2.png" />
    <p>To Kill a Mokingbird DVD</p>
    </div>

    <div class="image">
    <img style="max-width:47.5%" src="f1.png" />
    <img style="max-width:47.5%" src="f2.png" />
    <p>Futurama DVD</p>
    </div>

    </div>
    </div>
    
    </body>
</html>

EOF
) > results/index.html

#    To compute averages, use something like this:
# dat="`cat graf*1.auc`"; echo "mean([$dat])" | octave
# dat="`cat graf*2.auc`"; echo "mean([$dat])" | octave

dat=./data
gen=./generated
res=./results
ppan=./PhonePans
ps=./PhoneShots
cp $dat/Yosemite1.jpg $res
cp $dat/Yosemite2.jpg $res
cp $gen/pan_yosemite.jpg $res
cp $ppan/sage.png $res
cp $ppan/duff1.png $res
cp $ppan/duff2.png $res
cp $ppan/water.png $res
cp $ps/c1.png $res
cp $ps/c2.png $res
cp $ps/f1.png $res
cp $ps/f2.png $res
cp $ps/mb1.png $res
cp $ps/mb2.png $res
cp $ps/ai1.png $res
cp $ps/ai2.png $res
echo "results/index.html created"

rm -f webpage.zip && zip -r webpage.zip results
rm -f code.zip    && zip -r code.zip    Features.cpp
